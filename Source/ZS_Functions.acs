#library "ZS_Functions"
#import "ZS_Constants.acs"
#include "zcommon.acs"

// Math Clamp function, I can't believe nobody bothered to implement this yet. What the fuck was Graf thinking?
function int clamp (int x, int y, int z) {
	int value;
	value = x;
	if (value < y) {
		value = y;
	}
	if (value > z) {
		value = z;
	}
	return value;
}

// Retrieve the max shields of a player 
function int GetMaxShields (void){
	int ShieldsMax = CheckInventory("ShieldMaxTotal");
	Return ShieldsMax;
}

// Overshield Limiter
function int GetOverShieldLimit (void){
	int MaxShields = GetMaxShields();
	int ShieldsLimit = MaxShields + CheckInventory("OverShieldMax");
	Return ShieldsLimit;
}

// Retrieve the max armor of a player 
function int GetMaxArmor (void){
	int ArmorMax = CheckInventory("ArmorMaxTotal");
	Return ArmorMax;
}

// Update Damage Factor from Armor
function void UpdateDamageFactor (void) {
	int CurrentArmor = CheckInventory("RealArmor");
	int CurrentDamageFactor =  200.0 / (100 + CurrentArmor) ;
	if ( !!CheckInventory("ArmorActive") ) {
		SetActorProperty(0, APROP_DamageFactor, CurrentDamageFactor);
	} else {
		SetActorProperty(0, APROP_DamageFactor, 2.0);
	}
	int DefensePercent = ( 100.0 - ( 100 * (CurrentDamagefactor * 1 / 2) - 0.5)) >> 16;
	int PercentToUpdate;
	if ( DefensePercent < CheckInventory("ZSDefensePercent") ) {
		TakeInventory("ZSDefensePercent",1);
	}
	while ( DefensePercent > CheckInventory("ZSDefensePercent") ) {
		GiveInventory("ZSDefensePercent",1);
	}
}

// Damage Armor from taking Damage
function void DamageArmor (int amount) {
	int fixedamount = amount << 16;
	int factor = GetActorProperty(0,APROP_DamageFactor);
	int ApproxRawDamage = FixedDiv(fixedamount,factor) >> 16;
	int ArmorDamageAmount = 1;
	If ( ApproxRawDamage >= 10 ) {
		ArmorDamageAmount = 5;
	}
	If ( ApproxRawDamage >= 20 ) {
		ArmorDamageAmount = 10;
	}
	If ( ApproxRawDamage >= 30 ) {
		ArmorDamageAmount = 15;
	}
	If ( ApproxRawDamage >= 40 ) {
		ArmorDamageAmount = 20;
	}
	If ( ApproxRawDamage >= 50 ) {
		ArmorDamageAmount = 25;
	}
	If ( ApproxRawDamage >= 60 ) {
		ArmorDamageAmount = 35;
	}
	If ( ApproxRawDamage >= 70 ) {
		ArmorDamageAmount = 45;
	}
	If ( ApproxRawDamage >= 80 ) {
		ArmorDamageAmount = 55;
	}
	If ( ApproxRawDamage >= 90 ) {
		ArmorDamageAmount = 65;
	}
	If ( ApproxRawDamage >= 100 ) {
		ArmorDamageAmount = 75;
	}
	If ( ApproxRawDamage >= 125 ) {
		ArmorDamageAmount = 95;
	}
	If ( ApproxRawDamage >= 150 ) {
		ArmorDamageAmount = 125;
	}
	If ( ApproxRawDamage >= 200 ) {
		ArmorDamageAmount = 190;
	}
	If ( ApproxRawDamage >= 300 ) {
		ArmorDamageAmount = 295;
	}
	If ( ApproxRawDamage >= 400 ) {
		ArmorDamageAmount = ((ApproxRawDamage+2)/5)*5;
	}
	TakeInventory("RealArmor", ArmorDamageAmount);
	UpdateDamageFactor();
}

// Retrieves Max Health
function int GetMaxHealth (void) {
	int HealthMax = GetActorProperty(0,APROP_SpawnHealth);
	return HealthMax;
}